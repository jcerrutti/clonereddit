{"version":3,"sources":["assets/comment.svg","actions/index.js","services/post.js","reducers/utils/modifyPosts.js","reducers/getPosts.js","store/index.js","components/alert-circle/index.js","components/post-thumbnail/index.js","components/post-list/index.js","components/loading-spinner/index.js","containers/sidebar/index.js","components/post-home/index.js","containers/home/index.js","containers/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchPosts","subreddit","dispatch","type","requestPosts","fetch","then","response","json","getTopPosts","posts","data","children","map","child","visited","receivePosts","dismissPost","state","postIdToDismiss","newItems","items","filter","item","id","Object","assign","postSelected","selectPost","modifyKeyFromPost","postId","postMutation","i","length","isFetching","action","postIdDismissed","loggerMiddleware","createLogger","AlertCircle","className","PostThumbnail","thumbnail","interactive","href","target","rel","alt","src","PostList","post","onClickHandler","onDismissPost","isSelected","dateLabel","moment","unix","created_utc","utc","fromNow","onClick","title","author","commentIcon","num_comments","e","event","stopPropagation","LoadingSpinner","connect","postClicked","postDismissed","key","PostHome","url","HomePost","preloadedState","lastUpdated","props","useEffect","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8219f730.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.4c471c20.svg\";","import { getTopPosts } from '../services/post';\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const DISMISS_ALL = 'DISMISS_ALL';\nexport const POST_SELECTED = 'POST_SELECTED';\nexport const POST_DISMISSED = 'POST_DISMISSED';\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit,\n  };\n}\n\nfunction receivePosts(json) {\n  return {\n    type: RECEIVE_POSTS,\n    posts: json.data.children.map((child) => ({ ...child.data, visited: false })),\n  };\n}\n\nexport function fetchPosts(subreddit) {\n  return (dispatch) => {\n    dispatch(requestPosts(subreddit));\n    return getTopPosts(subreddit).then((json) => dispatch(receivePosts(json)));\n  };\n}\n\nexport function selectPost(post) {\n  return {\n    type: POST_SELECTED,\n    postSelected: post,\n  };\n}\n\nexport function dismissPost(post) {\n  return {\n    type: POST_DISMISSED,\n    postIdDismissed: post.id,\n  };\n}\n\nexport function dismissAll() {\n  return {\n    type: DISMISS_ALL,\n  };\n}\n\n","export function getTopPosts(subreddit) {\n  return fetch(`https://www.reddit.com/r/${subreddit}/top.json?limit=50`).then((response) =>\n    response.json()\n  );\n}\n","export function dismissPost(state, postIdToDismiss) {\n  const newItems = state.items.filter((item) => item.id !== postIdToDismiss);\n  return Object.assign({}, state, {\n    items: newItems,\n    postSelected: state.postSelected.id === postIdToDismiss ? newItems[0] : state.postSelected,\n  });\n}\n\nexport function selectPost(state, postSelected) {\n  return Object.assign({}, state, {\n    items: modifyKeyFromPost(state, postSelected.id, { visited: true }),\n    postSelected: postSelected,\n  });\n}\n\nfunction modifyKeyFromPost({ items }, postId, postMutation) {\n  for (let i = 0; i < items.length; i++) {\n    if (items[i].id === postId) {\n      items[i] = Object.assign(items[i], postMutation);\n      break;\n    }\n  }\n  return items;\n}\n","import {\n  REQUEST_POSTS,\n  RECEIVE_POSTS,\n  POST_SELECTED,\n  POST_DISMISSED,\n  DISMISS_ALL,\n} from '../actions';\n\nimport { dismissPost, selectPost } from './utils/modifyPosts';\n\nfunction posts(state = { isFetching: false, items: [], postSelected: null }, action) {\n  switch (action.type) {\n    case RECEIVE_POSTS:\n      action.posts[0].visited = true;\n      return Object.assign({}, state, {\n        isFetching: false,\n        items: action.posts,\n        postSelected: action.posts[0],\n      });\n    case REQUEST_POSTS:\n      return Object.assign(\n        {},\n        state,\n        {\n          isFetching: true,\n          subreddit: action.subreddit,\n        },\n        action\n      );\n    case DISMISS_ALL:\n      return Object.assign(\n        {},\n        state,\n        {\n          items: [],\n          postSelected: null,\n        },\n        action\n      );\n    case POST_SELECTED:\n      return selectPost(state, action.postSelected);\n    case POST_DISMISSED:\n      return dismissPost(state, action.postIdDismissed);\n    default:\n      return state;\n  }\n}\n\nexport default posts;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from '../reducers/getPosts'\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}","import React from 'react';\nimport './style.css';\n\nexport default function AlertCircle() {\n  return <span className=\"dot\"></span>;\n}\n","import React from 'react';\n\nexport default function PostThumbnail({ thumbnail, interactive = false }) {\n  return interactive ? (\n    <a href={thumbnail} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img alt=\"thumbnail\" src={thumbnail} />\n    </a>\n  ) : (\n    <img alt=\"thumbnail\" src={thumbnail} />\n  );\n}\n","import React from 'react';\nimport './style.css';\nimport moment from 'moment';\n\nimport commentIcon from '../../assets/comment.svg';\nimport AlertCircle from '../alert-circle';\nimport PostThumbnail from '../post-thumbnail';\n\nexport default function PostList({ post, onClickHandler, onDismissPost, isSelected }) {\n  const dateLabel = moment.unix(post.created_utc).utc().fromNow();\n  const className = `post-list${isSelected ? ' selected' : ''}`;\n\n  function dismissPost(event, post) {\n    event.stopPropagation();\n    onDismissPost(post);\n  }\n  return (\n    <div className={className} onClick={() => onClickHandler(post)}>\n      <h4 className=\"title\">\n        {!post.visited && <AlertCircle />}\n        {post.title}\n      </h4>\n      <p className=\"author\">by {post.author}</p>\n      <div>\n        {post.thumbnail !== 'self' && (\n          <PostThumbnail thumbnail={post.thumbnail} interactive={false} />\n        )}\n      </div>\n      <p className=\"comments\">\n        <img className=\"comment-icon\" alt=\"comment-icon\" src={commentIcon} />\n        {post.num_comments} comments\n      </p>\n      <p className=\"date-created\">Created: {dateLabel}</p>\n      <button onClick={(e) => dismissPost(e, post)} className=\"dismiss-button\">\n        Dismiss\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function LoadingSpinner() {\n  return <div className=\"loader\"></div>;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport PostList from '../../components/post-list';\nimport LoadingSpinner from '../../components/loading-spinner';\nimport { selectPost, dismissPost, fetchPosts } from '../../actions';\nimport './style.css';\n\nfunction Sidebar({ posts, dispatch, postSelected, isFetching, subreddit }) {\n  function postClicked(post) {\n    dispatch(selectPost(post));\n  }\n\n  function postDismissed(post) {\n    dispatch(dismissPost(post));\n  }\n\n  function onRefreshAllClick() {\n    dispatch(fetchPosts(subreddit));\n  }\n\n  return (\n    <aside>\n      {!isFetching ? (\n        posts.length ? (\n          posts.map((post) => (\n            <PostList\n              isSelected={postSelected.id === post.id}\n              onDismissPost={postDismissed}\n              onClickHandler={postClicked}\n              key={post.id}\n              post={post}\n            />\n          ))\n        ) : (\n          <button onClick={onRefreshAllClick} className=\"refresh-button\">\n            Refresh List\n          </button>\n        )\n      ) : (\n        <LoadingSpinner />\n      )}\n    </aside>\n  );\n}\n\nSidebar.propTypes = {\n  posts: PropTypes.array.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  const { postSelected, subreddit } = state;\n\n  return {\n    postSelected,\n    subreddit,\n  };\n}\n\nexport default connect(mapStateToProps)(Sidebar);\n","import React from 'react';\n\nimport './style.css';\n\nimport PostThumbnail from '../post-thumbnail';\n\nexport default function PostHome({ post }) {\n  return (\n    <div className=\"post-home\">\n      <h3>{post.title}</h3>\n      {post.thumbnail !== 'self' && <PostThumbnail thumbnail={post.thumbnail} interactive={true} />}\n      <a className=\"post-link\" href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        Read it on Reddit\n      </a>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport PostHome from '../../components/post-home';\n\nexport default function HomePost({ post }) {\n  return <PostHome post={post} />;\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts, dismissAll } from '../actions';\nimport './style.css';\n\nimport Sidebar from './sidebar';\nimport Home from './home';\n\nfunction RedditApp(props) {\n  const { posts, postSelected, isFetching, dispatch } = props;\n  useEffect(() => {\n    dispatch(fetchPosts('reactjs'));\n  }, []);\n\n  function onDismissAllClick() {\n    dispatch(dismissAll());\n  }\n\n  return (\n    <div className=\"main-container\">\n      <Sidebar posts={posts} isFetching={isFetching} />\n      <div>\n        {!!posts.length && (\n          <button onClick={onDismissAllClick} className=\"dismiss-all-button\">\n            Dismiss All\n          </button>\n        )}\n        <h1 className=\"app-title\">CloneReddit</h1>\n        {postSelected && <Home post={postSelected} />}\n      </div>\n    </div>\n  );\n}\n\nRedditApp.propTypes = {\n  posts: PropTypes.array.isRequired,\n  postSelected: PropTypes.object,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  const { isFetching, lastUpdated, items: posts, postSelected } = state;\n\n  return {\n    posts: posts || [],\n    isFetching: isFetching || false,\n    postSelected: postSelected || null,\n    lastUpdated,\n  };\n}\n\nexport default connect(mapStateToProps)(RedditApp);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport RedditApp from './containers';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <RedditApp />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}